apiVersion: apps/v1
kind: {{ .Values.gateway.kind }}
metadata:
  name: gateway-{{ include "tyk-hybrid.fullname" . }}
  labels:
    app: gateway-{{ include "tyk-hybrid.fullname" . }}
    chart: {{ include "tyk-hybrid.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if eq .Values.gateway.kind "Deployment" }}
  replicas: {{ .Values.gateway.replicaCount }}
{{- end }}
  minReadySeconds: 10
{{- if eq .Values.gateway.kind "Deployment" }}
  strategy:
{{- else }}
  updateStrategy:
{{- end }}
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
{{- if eq .Values.gateway.kind "Deployment" }}
      maxSurge: 2
{{- end }}
      maxUnavailable: 1
  selector:
    matchLabels:
      app: gateway-{{ include "tyk-hybrid.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: gateway-{{ include "tyk-hybrid.fullname" . }}
        release: {{ .Release.Name }}
    spec:
{{- if .Values.gateway.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.gateway.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.gateway.tolerations }}
      tolerations:
{{ toYaml .Values.gateway.tolerations | indent 8 }}
{{- end }}
{{- if .Values.gateway.affinity }}
      affinity:
{{ toYaml .Values.gateway.affinity | indent 8 }}
{{- end }}
      containers:
      - name: gateway-{{ .Chart.Name }}
        image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
        imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        env:
          - name: TYK_GW_LISTENPORT
            value: "{{ .Values.gateway.containerPort }}"
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "{{ .Values.redis.shardCount }}"
          - name: TYK_GW_STORAGE_ADDRS
            {{- if and .Values.redis.host .Values.redis.port }}
            value: "{{ .Values.redis.host }}:{{ .Values.redis.port }}"
            {{- else }}
            value: "{{ join "," .Values.redis.addrs }}"
            {{- end }}
          - name: TYK_GW_STORAGE_ENABLECLUSTER
            value: "{{ default "false" .Values.redis.enableCluster }}"
          - name: TYK_GW_STORAGE_PASSWORD
            value: "{{ .Values.redis.pass }}"
          - name: TYK_GW_STORAGE_USESSL
            value: "{{ .Values.redis.useSSL }}"
          - name: TYK_GW_HTTPSERVEROPTIONS_USESSL
            value: "{{ .Values.gateway.tls }}"
          - name: TYK_GW_SLAVEOPTIONS_RPCKEY
            value: "{{ default .Values.tyk_k8s.org_id .Values.gateway.rpc.rpcKey }}"
          - name: TYK_GW_SLAVEOPTIONS_APIKEY
            value: "{{ default .Values.tyk_k8s.dash_key .Values.gateway.rpc.apiKey }}"
          - name: TYK_GW_SECRET
            value: "{{ .Values.secrets.APISecret }}"
          - name: TYK_GW_SLAVEOPTIONS_CONNECTIONSTRING
            value: "{{ .Values.gateway.rpc.connString}}"
          - name: TYK_GW_SLAVEOPTIONS_USESSL
            value: "{{ .Values.gateway.rpc.useSSL}}"
          - name: TYK_GW_SLAVEOPTIONS_BINDTOSLUGSINSTEADOFLISTENPATHS
            value: "{{ default "false" .Values.gateway.rpc.bindToSlugs }}"
          - name: TYK_GW_SLAVEOPTIONS_SSLINSECURESKIPVERIFY
            value: "{{ .Values.gateway.rpc.sslInsecureSkipVerify }}"  
          - name: TYK_GW_DBAPPCONFOPTIONS_NODEISSEGMENTED
            value: "{{ .Values.enableSharding }}"
          - name: TYK_GW_DBAPPCONFOPTIONS_TAGS
            value: "{{.Values.gateway.tags }}"
        {{- if .Values.gateway.extraEnvs }}
        {{- range $env := .Values.gateway.extraEnvs }}
          - name: {{ $env.name }}
            value: {{ $env.value | quote }}
        {{- end }}
        {{- end }}
        command: ["/opt/tyk-gateway/tyk", "--conf=/etc/tyk-gateway/tyk.conf"]
        workingDir: /opt/tyk-gateway
        ports:
        - containerPort: {{ .Values.gateway.containerPort }}
        resources:
{{ toYaml .Values.gateway.resources | indent 12 }}
        volumeMounts:
          - name: hybrid-gateway-conf
            mountPath: /etc/tyk-gateway
          - name: {{ .Release.Name }}-default-cert
            mountPath: /etc/certs
          - name: tyk-scratch
            mountPath: /mnt/tyk-gateway
        livenessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            port: {{ .Values.gateway.containerPort }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            port: {{ .Values.gateway.containerPort }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      volumes:
        - name: hybrid-gateway-conf
          configMap:
            name: hybrid-gateway-conf-{{ include "tyk-hybrid.fullname" . }}
            items:
              - key: tyk_hybrid.conf
                path: tyk.conf
        - name: tyk-scratch
          emptyDir: {}
        - name: {{ .Release.Name }}-default-cert
          secret:
            secretName: {{ .Release.Name }}-default-cert
