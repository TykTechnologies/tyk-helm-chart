apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-{{ include "tyk-pro.fullname" . }}
  labels:
    app: dashboard-{{ include "tyk-pro.fullname" . }}
    chart: {{ include "tyk-pro.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.dash.replicaCount }}
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: dashboard-{{ include "tyk-pro.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: dashboard-{{ include "tyk-pro.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
      {{- if .Values.enableIstioIngress }}
        traffic.sidecar.istio.io/excludeInboundPorts: "{{ .Values.dash.containerPort }}"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/deployment-dash.yaml") . | sha256sum }}
    spec:
{{- if .Values.dash.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.dash.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.dash.tolerations }}
      tolerations:
{{ toYaml .Values.dash.tolerations | indent 8 }}
{{- end }}
{{- if .Values.dash.affinity }}
      affinity:
{{ toYaml .Values.dash.affinity | indent 8 }}
{{- end }}
      containers:
      - image: "{{ .Values.dash.image.repository }}:{{ .Values.dash.image.tag }}"
        imagePullPolicy: {{ .Values.dash.image.pullPolicy }}
        name: dashboard-{{ .Chart.Name }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        env:
          - name: TYK_DB_LISTENPORT
            value: "{{ .Values.dash.containerPort }}"
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "{{ .Values.redis.shardCount }}"
          - name: TYK_DB_HOSTCONFIG_HOSTNAME
            value: "{{ .Values.dash.hostName }}"
          - name: TYK_DB_HOSTCONFIG_GATEWAYHOSTNAME
            value: "{{ .Values.gateway.hostName }}"
          - name: TYK_DB_TYKAPI_HOST
            value: "{{ include "tyk-pro.gwproto" . }}://gateway-svc-{{ include "tyk-pro.fullname" . }}.{{ .Release.Namespace }}"
          - name: TYK_DB_TYKAPI_PORT
            value: "{{ .Values.gateway.service.port }}"
          - name: TYK_DB_TYKAPI_SECRET
            value: "{{ .Values.secrets.APISecret }}"
          - name: TYK_DB_REDISADDRS
            {{- if and .Values.redis.host .Values.redis.port }}
            value: "{{ .Values.redis.host }}:{{ .Values.redis.port }}"
            {{- else }}
            value: "{{ join "," .Values.redis.addrs }}"
            {{- end }}
          - name: TYK_DB_ENABLECLUSTER
            value: "{{ default "false" .Values.redis.enableCluster }}"
          - name: TYK_DB_REDISPASSWORD
            value: "{{ .Values.redis.pass }}"
          - name: TYK_DB_REDISUSESSL
            value: "{{ .Values.redis.useSSL }}"
          - name: TYK_DB_REDISSSLINSECURESKIPVERIFY
            value: "true"
          - name: TYK_DB_MONGOURL
            value: {{ .Values.mongo.mongoURL | quote }}
          - name: TYK_DB_MONGOUSESSL
            value: "{{ .Values.mongo.useSSL }}"
          - name: TYK_DB_ADMINSECRET
            value: "{{ .Values.secrets.AdminSecret }}"
          - name: TYK_DB_NODESECRET
            value: "{{ .Values.secrets.APISecret }}"
          - name: TYK_DB_LICENSEKEY
            value: {{ .Values.dash.license | quote }}
        {{- if .Values.dash.extraEnvs }}
        {{- range $env := .Values.dash.extraEnvs }}
          - name: {{ $env.name }}
            value: {{ $env.value | quote }}
        {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.dash.resources | indent 12 }}
        command: ["/opt/tyk-dashboard/tyk-analytics", "--conf=/etc/tyk-dashboard/tyk_analytics.conf"]
        workingDir: /opt/tyk-dashboard
        ports:
        - containerPort: {{ .Values.dash.containerPort }}
        volumeMounts:
          - name: tyk-dashboard-conf
            mountPath: /etc/tyk-dashboard
        livenessProbe:
          httpGet:
            scheme: "HTTP"
            path: /
            port: {{ .Values.dash.containerPort }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP"
            path: /
            port: {{ .Values.dash.containerPort }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      volumes:
        - name: tyk-dashboard-conf
          configMap:
            name: dashboard-conf-{{ include "tyk-pro.fullname" . }}
            items:
              - key: tyk_analytics.conf
                path: tyk_analytics.conf
