{{- if .Values.gateway.enabled -}}
apiVersion: apps/v1
kind: {{ .Values.gateway.kind }}
metadata:
  name: gateway-{{ include "tyk-pro.fullname" . }}
  labels:
    app: gateway-{{ include "tyk-pro.fullname" . }}
    chart: {{ include "tyk-pro.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if eq .Values.gateway.kind "Deployment" }}
  replicas: {{ .Values.gateway.replicaCount }}
{{- end }}
  minReadySeconds: 10
{{- if eq .Values.gateway.kind "Deployment" }}
  strategy:
{{- else }}
  updateStrategy:
{{- end }}
{{- if ((.Values.gateway.strategy).type) }}
    type: {{ .Values.gateway.strategy.type }}
{{- else }}
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
{{- if eq .Values.gateway.kind "Deployment" }}
      maxSurge: 2
{{- end }}
      maxUnavailable: 1
{{- end }}
  selector:
    matchLabels:
      app: gateway-{{ include "tyk-pro.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      # Enable backward compatibility to chart 0.8.1.
      {{- if or .Values.gateway.enableIstioIngress .Values.enableIstioIngress }}
      annotations:
        traffic.sidecar.istio.io/excludeInboundPorts: "{{ .Values.gateway.containerPort}}"
        traffic.sidecar.istio.io/includeInboundPorts: ""
        traffic.sidecar.istio.io/excludeOutboundPorts: "{{ .Values.dash.containerPort }}"
        traffic.sidecar.istio.io/includeOutboundPorts: ""
      {{- end }}
      labels:
        app: gateway-{{ include "tyk-pro.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-gateway.yaml") . | sha256sum }}
    spec:
{{- if .Values.gateway.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.gateway.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.gateway.tolerations }}
      tolerations:
{{ toYaml .Values.gateway.tolerations | indent 8 }}
{{- end }}
{{- if .Values.gateway.affinity }}
      affinity:
{{ toYaml .Values.gateway.affinity | indent 8 }}
{{- end }}
      containers:
      - name: gateway-{{ .Chart.Name }}
        image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
        imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        env:
          - name: TYK_GW_LISTENPORT
            value: "{{ .Values.gateway.containerPort }}"
          {{- if .Values.gateway.control.enabled }}
          - name: TYK_GW_CONTROLAPIHOSTNAME
            value: "{{ include "tyk-pro.gwproto" . }}://gateway-control-svc-{{  include "tyk-pro.fullname" . }}.{{ .Release.Namespace }}"
          - name: TYK_GW_CONTROLAPIPORT
            value: "{{ .Values.gateway.control.containerPort }}"
          {{- end }}
          # Lagacy support for Redis Cluster driver. Driver dropped in v3.0.0.
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "128"
          - name: TYK_GW_STORAGE_ADDRS
            value: {{ include "tyk-pro.redis_url" . | quote }}
          - name: TYK_GW_STORAGE_ENABLECLUSTER
            value: "{{ default "false" .Values.redis.enableCluster }}"
          - name: TYK_GW_STORAGE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
                key: redisPass
          - name: TYK_GW_STORAGE_DATABASE
            value: "{{ default "0" .Values.redis.storage.database }}"
          - name: TYK_GW_STORAGE_USESSL
            value: "{{ default "false" .Values.redis.useSSL }}"
        # Enable backward compatibility to chart 0.8.1.
        {{- if or .Values.gateway.sharding .Values.enableSharding}}
          - name: TYK_GW_DBAPPCONFOPTIONS_NODEISSEGMENTED
            {{- if .Values.gateway.sharding }}
            value: "{{ .Values.gateway.sharding.enabled }}"
            {{- else }}
            value: "{{ .Values.enableSharding }}"
            {{- end }}
        {{- end }}
          - name: TYK_GW_DBAPPCONFOPTIONS_CONNECTIONSTRING
            value: "{{ include "tyk-pro.dash_proto" . }}://dashboard-svc-{{ include "tyk-pro.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.dash.service.port }}"
          - name: TYK_GW_POLICIES_POLICYCONNECTIONSTRING
            value: "{{ include "tyk-pro.dash_proto" . }}://dashboard-svc-{{ include "tyk-pro.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.dash.service.port }}"
          - name: TYK_GW_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
                key: APISecret
          - name: TYK_GW_NODESECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
                key: APISecret
        # Enable backward compatibility to chart 0.8.1.
        {{- if or .Values.gateway.sharding .Values.enableSharding}}
          - name: TYK_GW_DBAPPCONFOPTIONS_TAGS
            {{- if .Values.gateway.sharding }}
            value: "{{ .Values.gateway.sharding.tags }}"
            {{- else }}
            value: "{{ .Values.gateway.tags }}"
            {{- end }}
        {{- end }}
          - name: TYK_GW_HTTPSERVEROPTIONS_USESSL
            value: "{{ .Values.gateway.tls }}"
          {{- if .Values.gateway.extraEnvs }}
          {{- toYaml .Values.gateway.extraEnvs| nindent 10 }}
          {{- end }}
        command: ["/opt/tyk-gateway/tyk", "--conf=/etc/tyk-gateway/tyk.conf"]
        workingDir: /opt/tyk-gateway
        ports:
        - containerPort: {{ .Values.gateway.containerPort }}
        {{- if .Values.gateway.control.enabled }}
        - containerPort: {{ .Values.gateway.control.containerPort }}
        {{- end }}
        resources:
{{ toYaml .Values.gateway.resources | indent 12 }}
        volumeMounts:
          - name: tyk-mgmt-gateway-conf
            mountPath: /etc/tyk-gateway
          - name: tyk-scratch
            mountPath: /mnt/tyk-gateway
          - name: {{ .Release.Name }}-default-cert
            mountPath: /etc/certs
          {{- if .Values.gateway.mounts }}
          {{- range $secret := .Values.gateway.mounts }}
          - name: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
          {{- end }}
          {{- end }}
        livenessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            {{- if and .Values.gateway.control.enabled (or (semverCompare "^3.2.x" (include "tyk-pro.gateway-version" . )) (semverCompare ">=3.0.4 < 3.1.0" (include "tyk-pro.gateway-version" .))) }}
            port: {{ .Values.gateway.control.containerPort }}
            {{- else }}
            port: {{ .Values.gateway.containerPort }}
            {{- end }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            {{- if and .Values.gateway.control.enabled (or (semverCompare "^3.2.x" (include "tyk-pro.gateway-version" . )) (semverCompare ">=3.0.4 < 3.1.0" (include "tyk-pro.gateway-version" .))) }}
            port: {{ .Values.gateway.control.containerPort }}
            {{- else }}
            port: {{ .Values.gateway.containerPort }}
            {{- end }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      {{- if .Values.gateway.securityContext }}
      securityContext:
      {{- toYaml .Values.gateway.securityContext | nindent 10}} 
      {{- end }}
      volumes:
        - name: tyk-mgmt-gateway-conf
          configMap:
            name: mgmt-gateway-conf-{{ include "tyk-pro.fullname" . }}
            items:
              - key: tyk_mgmt.conf
                path: tyk.conf
        - name: tyk-scratch
          emptyDir: {}
        - name: {{ .Release.Name }}-default-cert
          secret:
            secretName: {{ .Release.Name }}-default-cert
        {{- if .Values.gateway.mounts }}
        {{- range $secret := .Values.gateway.mounts }}
        - name: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
          secret:
            secretName: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
        {{- end }}
        {{- end }}
{{- end }}
