Run the following in bash to bootstrap the dashboard instance:

1. Bootstrap the dashboard so we can get a username and password to login, this also generates access tokens for the controller to use

{{- if .Values.dash.ingress.enabled }}
export DASH_URL="{{ .Values.dash.hostName }}"
export DASH_HTTPS="{{ if gt (len .Values.dash.ingress.tls) 0 }}1{{ end }}"
{{- else }}
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services dashboard-svc-{{ include "tyk-pro.fullname" . }})
export NODE_IP=$(kubectl get nodes --selector=kubernetes.io/role!=master -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')

If you're using minikube, run this instead:
export NODE_IP=$(minikube ip)

export DASH_URL="$NODE_IP:$NODE_PORT"
export DASH_HTTPS=""
{{- end }}

1a. You may need to open up that port in your firewall so that we can access the dashboard. Example in GCloud

gcloud compute firewall-rules create dashboard --allow tcp:$NODE_PORT

1b. Bootstrap the dashboard

./tyk-pro/scripts/bootstrap_k8s.sh $DASH_URL {{ .Values.secrets.AdminSecret }} {{ .Release.Namespace }} $DASH_HTTPS

At this point, Tyk Pro is fully installed and should be accessible.

You might want to install Tyk Operator next to manage Ingress resources or manage your APIs.

[Tyk Operator](https://github.com/TykTechnologies/tyk-operator/)
