## Default values for tyk-pro chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.
## See Tyk Helm documentation for installation details:
## https://tyk.io/docs/tyk-self-managed/tyk-helm-chart/
## Registry for all Tyk images - https://hub.docker.com/u/tykio


# Chart name override. Truncates to 63 characters.
# Default value: tyk-pro.name
nameOverride: ""

# App name override. Truncates to 63 characters.
# Default value: tyk-pro.fullname
fullnameOverride: ""

# Master switch for enabling/disabling bootstraing job batch, role binding,
# role, and account service.
bootstrap: true

# Settings related to k8s that are ran when installing the tyk stack
jobs:
  bootstrapJobName: boostrap-post-install


# These are your Tyk stack secrets will directly map to the following
# Tyk stack configuration:
secrets:
  # tyk_analytics.conf tyk_api_config.secret
  # tyk_analytics.conf shared_node_secret
  # tyk.conf node_secret
  # tyk.conf secret
  APISecret: CHANGEME
  # tyk_analytics.conf admin_secret
  # tib.conf TykAPISettings.GatewayConfig.AdminSecret
  # tib.conf TykAPISettings.DashboardConfig.AdminSecret
  AdminSecret: "12345"
  # If you don't want to store plaintext secrets in the Helm value file and would
  # rather provide the k8s Secret externally please populate the value below
  useSecretName: ""

redis:
  # The addrs value will allow you to set your Redis addresses. If you are
  # using a redis cluster, you can list the endpoints of the redis instances
  # or use the cluster configuration endpoint.
  # Default value: redis.{{ .Release.Namespace }}.svc.cluster.local:6379
  # addrs:
  #   - redis.tyk.svc.cluster.local:6379
  #   This is the DNS name of the redis as set when using Bitnami
  #   - tyk-redis-master.tyk.svc.cluster.local:6379


  # Redis password
  # If you're using Bitnami Redis chart please input your password in the field below
  # pass: ""

  # Enables SSL for Redis connection. Redis instance will have to support that.
  # Default value: false
  # useSSL: true

  # The enableCluster value will allow you to indicate to Tyk whether you are
  # running a Redis cluster or not.
  # Default value: false
  # enableCluster: true

  # By default the database index is 0. Setting the database index is not
  # supported with redis cluster. As such, if you have enableCluster: true,
  # then this value should be omitted or explicitly set to 0.
  storage:
    database: 0

# Choose the backend for Tyk. [ "mongo", "postgres" ]
backend: mongo
mongo:
  # The mongoURL value will allow you to set your MongoDB address.
  # Default value: mongodb://mongo.{{ .Release.Namespace }}.svc.cluster.local:27017/tyk_analytics
  # mongoURL: mongodb://mongo.tyk.svc.cluster.local:27017/tyk_analytics

  # If your MongoDB has a password you can add the username and password to the url
  # mongoURL: mongodb://root:pass@tyk-mongo-mongodb.tyk.svc.cluster.local:27017/tyk_analytics?authSource=admin

  # Enables SSL for MongoDB connection. MongoDB instance will have to support that.
  # Default value: false
  useSSL: false

# Postgres connection string parameters.
postgres:
  host: tyk-postgres-postgresql.tyk.svc.cluster.local
  port: 5432
  user: postgres
  password:
  database: tyk_analytics
  sslmode:

mdcb:
  # Determines whether or not the MDCB component should be installed.
  enabled: false
  # If set to true the MDCB will use SSL connection.
  # You will also need to set the:
  # - TYK_MDCB_SERVEROPTIONS_CERTIFICATE_CERTFILE
  # - TYK_MDCB_SERVEROPTIONS_CERTIFICATE_KEYFILE
  # variables in extraEnvs object array to define your SSL cert and key files.
  tls: false
  # Sets the port of the health endpoint.
  healthcheckport: 8181
  # Sets MDCB license.
  license: ""
  # When true. Instead of sending analytics directly to MongoDB, MDCB can send
  # analytics to Redis. This will allow tyk-pump to pull analytics from Redis
  # and send to your own data sinks.
  forwardAnalyticsToPump: true

  replicaCount: 1
  containerPort: 9090
  image:
    # Requires credential
    repository: tykio/tyk-mdcb-docker
    tag: v1.8.0
    pullPolicy: Always
  service:
    type: LoadBalancer
    port: 9090
  resources: {}
    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  mounts: []

tib:
  # Determines whether or not the tib component should be installed.
  enabled: false
  # If set to true TIB will use SSL connection. THIS IS RECOMMENDED.
  # You will also need to set the:
  # - TYK_TIB_SERVEROPTIONS_CERTIFICATE_CERTFILE
  # - TYK_TIB_SERVEROPTIONS_CERTIFICATE_KEYFILE
  # variables in extraEnvs object array to define your SSL cert and key files.
  tls: true
  # The REST API secret to configure the Tyk Identity Broker remotely
  secret: ""

  replicaCount: 1
  containerPort: 3010
  image:
    repository: tykio/tyk-identity-broker
    tag: v1.1.1
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3010
  ingress:
    enabled: false
    # specify your ingress controller class name below
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: true
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  configMap:
    # Create a configMap to store profiles json
    profiles: tyk-tib-profiles-conf
  mounts: []

dash:
  # Determines whether or not the dashboard component should be installed.
  enabled: true
  # Dashboard will only bootstrap if the master bootstrap option is set to true.
  bootstrap: true

  # It creates a secret for Tyk Operator along with bootstraping dasboard. Operator Secret is only created if the dash.bootstrap
  # and operatorSecret are set to true.
  # Set false to disable creating a secret for Tyk Operator.
  operatorSecret: true

  # The hostname to bind the Dashboard to.
  hostName: tyk-dashboard.local
  # If set to true the Dashboard will use SSL connection.
  # You will also need to set the:
  # - TYK_DB_SERVEROPTIONS_CERTIFICATE_CERTFILE
  # - TYK_DB_SERVEROPTIONS_CERTIFICATE_KEYFILE
  # variables in extraEnvs object array to define your SSL cert and key files.
  tls: false
  # Dashboard license.
  license: ""
  # Dashboard admin information.
  adminUser:
    firstName: admin
    lastName: user
    email: default@example.com
    # Set a password or a random one will be assigned.
    password: ""
  # Dashboard Organisation information.
  org:
    name: Default Org
    # The hostname to bind the Portal to.
    cname: tyk-portal.local

  replicaCount: 1
  containerPort: 3000
  image:
    repository: tykio/tyk-dashboard
    tag: v4.0.0
    pullPolicy: Always
  service:
    type: NodePort
    port: 3000
  # Creates an ingress object in k8s. Will require an ingress-controller and
  # annotation to that ingress controller.
  ingress:
    enabled: false
    # specify your ingress controller class name below
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  mounts: []

portal:
  # Portal will only bootstrap if both the Master and Dashboard bootstrap
  # options are set to true. Only set this to false if you're not planning
  # on using developer portal
  bootstrap: true
  path: /
  # Creates an ingress object in k8s. Will require an ingress-controller and
  # annotation to that ingress controller.
  ingress:
    enabled: false
    # specify your ingress controller class name below
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
gateway:
  # Determines whether or not the gateway component should be installed.
  enabled: true
  # The hostname to bind the Gateway to.
  hostName: tyk-gw.local
  # When true, sets the gateway protocol to HTTPS.
  tls: false
  # Sharding gateway allows you to selectively load APIs to specific gateways.
  # If enabled make sure you have at least one gateway that is not sharded.
  # Also be sure to match API segmentation tags with the tags selected below.
  sharding:
    enabled: false
    tags: ""
  # Set to true to use Tyk as the Ingress gateway to an Istio Service Mesh
  # We apply some exceptions to the Istio IPTables so inbound calls to the
  # Gateway and Dashboard are exposed to the outside world - see the deployment
  # templates for implementation
  enableIstioIngress: false

  kind: DaemonSet
  replicaCount: 2
  containerPort: 8080
  image:
    repository: tykio/tyk-gateway
    tag: v4.0.0
    pullPolicy: Always
  service:
    type: NodePort
    port: 8080
    externalTrafficPolicy: Local
    annotations: {}
  control:
    enabled: false
    containerPort: 9696
    port: 9696
    type: ClusterIP
    annotations: {}
  # Creates an ingress object in k8s. Will require an ingress-controller and
  # annotation to that ingress controller.
  ingress:
    enabled: false
    # specify your ingress controller class name below
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  nodeSelector: {}
  tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
  affinity: {}
  extraEnvs: []
  mounts: []

pump:
  # Determines whether or not the pump component should be installed.
  enabled: true

  replicaCount: 1
  image:
    repository: tykio/tyk-pump-docker-pub
    tag: v1.5.1
    pullPolicy: Always
  annotations: {}
  resources: {}
    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  mounts: []

rbac: true
